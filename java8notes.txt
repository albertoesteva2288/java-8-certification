3 comments type :
- single-line //
- multi-line /* */
- Javadoc /** */

Maximum one public class per file : matches the filename


Be careful

- public void eat(int piecesOfCheese){
	int bitesOfCheese = 1;
}
2 local variables are declared
- a variable is local to its scope
- Be careful with immutable types: String

- Arrays:
	- {true, true} is not a valid array declaration without new boolean[2]

byte<short<int<long
float<double

- Local variables require initializing them before referencing
- Instance variables have a default value

- Package: folders underneath the current path. A java file can be built from any folder (Compile even if the package is not correct). Be careful at runtime. 
- An assignation returns the value on the right

- Before checking references with ==, make sure the two variables are the same type, otherwise does not compile
- StringBuilder.substring() returns a string, does not update the variable (same behaviour as substring on a string)
- ArrayList: null does not require autoboxing

Unboxing null generates a NullPointerException
int value = (Integer) null;
If r is a reference of type Integer, then unboxing conversion converts r into r.intValue()


Chapter 4:
- Labels are not allowed for methods
- JavaBeans naming conventions: for a boolean: isVariableName(), not get!
- Static method can be called on an instance variable assigned to null
- Difference between initializer and static initializer: if the class is never instantiated, the initializer is never called.
- Final attributes must be declared exactly once, in declaration OR in static initializer. Otherwise compilation error, plus one for each other line it is declared.
- this() is only callable if the constructor is declared (not valid for default constructor)
- Lambdas:
	- return and ; required only if {return 1;}
	If type is specified, the parenthesis are required (String s)
	- Be careful with Lambda parameters type: Check matching interface if needed

- Autoboxing does not work for predicates


Chapter 5:
- A variable (even public) can be hidden but not overriden
- Abstract modifier is not implicitly applied to all methods since some can be declared as default
- A method with a body in an interface must be declared static or default
- An interface does not inherit fron Object
- Private methods can be hidden but not overriden: a reference of superclass type will always calll superclass method

Difference between:
- overload
- override
- hide

Be careful
A variable declared as Object can refer any variable whose class inherits Object
Any Object can not be passed as a parameter to a function taking an Object subclass parameter


final keyword in a method declaration to indicate that the method cannot be overridden by subclasses
Instance methods are preferred over interface default methods (case where extends one class implements another)

If a method is declared as abstract, it can not have a body declared. Pay attention to empty body {}

An interface may inherit two abstract methods with the same signature

All methods within abstract classes and interfaces are assumed to be abstract: wrong, an abstract class may contain concrete methods.

A class that implements an interface do not need to implement inherited methods if the class is abstract.


Chap6: Exceptions

Be careful, new Exception() does not raise the exception! The keyword throw is mandatory
- A method that declares an exception is not required to throw one
- Runtime exceptions/Errors can be thrown in any method


General exam questions:
Be careful with allowed/required:
Checked exceptions are allowed to be declared or thrown
Checked exceptions are required to be declared or thrown

Both seem correct according to correction

A method that declares an exception is not required to throw one
/!\ In a catch, an exception catched must be declared by one of the methods in the try, otherwise unreachable code

If two exceptions are thrown (the second in finally) only the second is displayed

Be careful: runtime Exception are not required to be declared: questions: which lines can be inserted so that the code compiles
_______________________
To be sorted:

Autoboxing work for collections not inferring predicates???



_______________________
Questions:
import java.util.*;
import java.sql.*;
Does it compile if there is no call to Date?

Hiding/Overriding:
- q8
- q11 code to undestand
